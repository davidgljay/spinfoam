{"version":3,"sources":["Hexgrid.js","FoamModel.js","App.js","serviceWorker.js","index.js"],"names":["sin","Math","cos","PI","hexCorners","center","size","reduce","text","i","angle_rad","x","y","getStyle","j","active","trail","turns","styles","hexagon","opacity","Hexgrid","props","width","height","grid","className","id","xmlns","xmlnsXlink","map","n","m","key","points","style","fill","stroke","strokeWidth","FoamModel","state","timer","trailEntropyLog","gridEntropy","transitions","setgrid","sum","k","random","log","setState","jump","probs","dice","length","transition","l","newActive","trailEntropy","console","concat","this","setInterval","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b5fb518.chunk.js","sourcesContent":["import React from 'react';\nconst {sin, cos, PI} = Math;\n\nconst hexCorners = (center, size) => {\n  const points = [0, 1, 2, 3, 4, 5].reduce((text, i) => {\n    var angle_deg = 60 * i\n    var angle_rad = PI / 180 * angle_deg\n    return text + ` ${center.x + size * cos(angle_rad)},${center.y + size * sin(angle_rad)}`\n  }, '')\n  return points\n}\n\nconst getStyle = (i, j, active, trail, turns) => {\n  if (i === active[0] && j === active[1]) {\n    return {...styles.hexagon, ...styles.active}\n  }\n  else {\n    return {...styles.hexagon, opacity: trail[i][j] * .02}\n  }\n}\n\nconst Hexgrid = (props) =>\n{\n  const {width, height, size, grid, active, trail, turns} = props\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <svg id=\"visualization\"\n        width={width}\n        height={height}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n        {\n          grid.map(\n            (n, i) => n.map((m, j) =>\n              trail[i][j] > 0 && <polygon\n                key={`${i},${j}`}\n                points={hexCorners({x: size * (i+1) * 1.5, y: size * ((i%2 + 1) + (j+1) * 1.75)}, size)}\n                style={getStyle(i,j, active, trail, turns)}/>\n            )\n          )\n        }\n\n      </svg>\n      </header>\n    </div>\n  );\n}\n\nexport default Hexgrid;\n\nconst styles = {\n  hexagon: {\n    fill: 'lightgrey',\n    stroke:'purple',\n    strokeWidth:2\n  },\n  active: {\n    fill: 'purple'\n  }\n};\n","\nimport React, {Component} from 'react'\nimport Hexgrid from './Hexgrid'\n\nclass FoamModel extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timer: null,\n      active: [this.props.size/2,this.props.size/2],\n      grid: [],\n      trail: [],\n      turns: 0,\n      trailEntropyLog: [0],\n      gridEntropy: 0\n    };\n\n    this.transitions = [\n      [-1,-1],\n      [0,-1],\n      [0,1],\n      [1,1],\n      [1,0],\n      [-1,0],\n      [0,0]\n    ]\n\n    this.setgrid = (size) => {\n      // Create an sizexsize grid. Each grid point has probabilities of jumping\n      // into 1 of 6 adjacent hexes.\n      let grid = []\n      let trail = []\n      let gridEntropy = 0\n      for (var i = 0; i < size; i++) {\n        grid[i] = []\n        trail[i] = []\n        for (var j = 0; j < size; j++) {\n          grid[i][j] = []\n          trail[i][j] = 0\n          let sum = 0\n          for (var k = 0; k < 7; k++) {\n            grid[i][j][k] = Math.random()\n            sum += grid[i][j][k]\n          }\n          for (var k = 0; k < 7; k++) {\n            grid[i][j][k] = grid[i][j][k]/sum\n            gridEntropy += grid[i][j][k] * Math.log(grid[i][j][k])\n          }\n        }\n      }\n      this.setState({grid, trail, gridEntropy})\n    }\n\n    this.jump = () => {\n      const {active, grid, trail, turns, gridEntropy, trailEntropyLog} = this.state\n      const probs = grid[active[0]][active[1]]\n      const dice = Math.random()\n      let sum = 0\n      let jump\n      for (var i = 0; i < probs.length; i++) {\n        sum += probs[i]\n        if (sum > dice) {\n          jump = i\n          break\n        }\n      }\n      const transition = this.transitions[jump]\n      const l = grid.length\n      const newActive = [(active[0] + transition[0] + l)%l, (active[1] + transition[1] + l)%l]\n      trail[newActive[0]][newActive[1]] += 1\n      if (turns%100 === 1) {\n        let trailEntropy = 0\n        for (var i = 0; i < trail.length; i++) {\n          for (var j = 0; j < trail[i].length; j++) {\n            trailEntropy += trail[i][j] > 0 ? trail[i][j]/turns * Math.log(trail[i][j]/turns) : 0\n          }\n        }\n        console.log(trailEntropy, trailEntropy - trailEntropyLog[trailEntropyLog.length-1]);\n        this.setState({trailEntropyLog: trailEntropyLog.concat(trailEntropy)})\n      }\n      this.setState({active: newActive, trail, turns: turns + 1})\n    }\n\n  }\n\n  componentDidMount() {\n    const {size} = this.props\n    this.setgrid(size)\n    this.setState({\n      timer: setInterval(() => this.jump(), 50)\n    })\n\n  }\n\n  componentWillUnmount() {\n    this.state.timer()\n\n  }\n\n  render () {\n    const {active, grid, trail, turns} = this.state\n    return <Hexgrid\n        width={800}\n        height={800}\n        size={7}\n        active={active}\n        grid={grid}\n        trail={trail}\n        turns={turns}\n      />\n  }\n}\n\n\nexport default FoamModel;\n","import React from 'react';\nimport './App.css';\nimport FoamModel from './FoamModel';\n\nfunction App() {\n  return <FoamModel size={50}/>\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}